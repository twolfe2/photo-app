"use strict";var app=angular.module("myApp",["ui.router","ui.router","satellizer","ngFileUpload"]);app.config(["$authProvider",function(t){t.loginUrl="/api/users/login",t.signupUrl="/api/users/signup",t.facebook({clientId:"277768235911300",url:"/api/users/facebook"})}]),app.config(["$stateProvider","$urlRouterProvider",function(t,e){t.state("home",{url:"/",templateUrl:"/html/home.html"}).state("register",{url:"/register",templateUrl:"/html/register.html",controller:"registerCtrl"}).state("login",{url:"/login",templateUrl:"/html/login.html",controller:"loginCtrl"}).state("images",{url:"/images",templateUrl:"/html/images.html",controller:"imagesCtrl",resolve:{Images:["Image",function(t){return t.getAll()}]}}).state("addImage",{url:"/addImage",templateUrl:"/html/addImage.html",controller:"addImageCtrl"}),e.otherwise("/")}]);var app=angular.module("myApp");app.controller("mainCtrl",["$scope","$state","$auth","$rootScope",function(t,e,o,r){t.isAuthenticated=function(){return o.isAuthenticated()},t.isAuthenticated()&&(r.currUser=o.getPayload()),t.logout=function(){o.logout(),e.go("home")}}]),app.controller("loginCtrl",["$scope","$state","$auth","$rootScope",function(t,e,o,r){t.login=function(){o.login(t.user).then(function(t){console.log("res",t),e.go("home")})["catch"](function(t){console.log("err",t)})}}]),app.controller("registerCtrl",["$scope","$state","$auth",function(t,e,o){t.register=function(){t.user.password!==t.user.password2?(t.user.password=null,t.user.password2=null,alert("Passwords do NOT match. Try again.")):o.signup(t.user).then(function(t){console.log("res",t),e.go("login")})["catch"](function(t){console.log("err",t)})}}]),app.controller("addImageCtrl",["$scope","$state","$auth","Upload",function(t,e,o,r){o.isAuthenticated()&&(t.addImage=function(){r.upload({url:"/api/images",data:{photo:t.photo,name:t.name}}).then(function(t){e.go("images")})})}]),app.controller("imagesCtrl",["$scope","Images",function(t,e){console.log("imagesCrtl"),console.log(t.file),t.images=e}]);var app=angular.module("myApp");app.service("Image",["$q","$http",function(t,e){this.getAll=function(){return e.get("api/images").then(function(t){return t.data})["catch"](function(t){t&&console.log(t)})}}]);
//# sourceMappingURL=data:application/json;base64,
